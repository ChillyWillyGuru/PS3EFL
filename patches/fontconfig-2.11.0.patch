diff -burN fontconfig-2.11.0/conf.d/10-no-sub-pixel.conf fontconfig-2.11.0-PS3/conf.d/10-no-sub-pixel.conf
--- fontconfig-2.11.0/conf.d/10-no-sub-pixel.conf	2013-10-10 23:10:16.000000000 -0400
+++ fontconfig-2.11.0-PS3/conf.d/10-no-sub-pixel.conf	2013-12-16 10:15:52.168195653 -0500
@@ -1,7 +1,7 @@
 <?xml version="1.0"?>
 <!DOCTYPE fontconfig SYSTEM "fonts.dtd">
 <fontconfig>
-<!--  Enable sub-pixel rendering --> 
+<!--  Disable sub-pixel rendering --> 
   <match target="pattern">
     <!--
       This configuration is available on the major desktop environments.
diff -burN fontconfig-2.11.0/configure fontconfig-2.11.0-PS3/configure
--- fontconfig-2.11.0/configure	2013-10-11 00:28:48.000000000 -0400
+++ fontconfig-2.11.0-PS3/configure	2013-12-16 10:12:58.283236256 -0500
@@ -13995,8 +13995,10 @@
 
 else
 
-				as_fn_error $? "
-*** No scandir function available." "$LINENO" 5
+				{ $as_echo "$as_me:${as_lineno-$LINENO}: result: no -- using builtin scandir function" >&5
+$as_echo "no -- using builtin scandir function" >&6; }
+
+$as_echo "#define HAVE_SCANDIR_VOID_P 1" >>confdefs.h
 
 fi
 rm -f core conftest.err conftest.$ac_objext \
diff -burN fontconfig-2.11.0/configure.ac fontconfig-2.11.0-PS3/configure.ac
--- fontconfig-2.11.0/configure.ac	2013-10-11 00:27:42.000000000 -0400
+++ fontconfig-2.11.0-PS3/configure.ac	2013-12-16 10:14:22.712183240 -0500
@@ -148,7 +148,7 @@
 # Checks for library functions.
 AC_FUNC_VPRINTF
 AC_FUNC_MMAP
-AC_CHECK_FUNCS([link mkstemp mkostemp _mktemp_s getopt getopt_long getprogname getexecname rand random lrand48 random_r rand_r regcomp regerror regexec regfree fstatvfs fstatfs lstat])
+AC_CHECK_FUNCS([link mkstemp mkostemp _mktemp_s getopt getopt_long getprogname getexecname rand random lrand48 random_r rand_r readlink regcomp regerror regexec regfree fstatvfs fstatfs lstat])
 
 dnl AC_CHECK_FUNCS doesn't check for header files.
 dnl posix_fadvise() may be not available in older libc.
@@ -190,8 +190,8 @@
 				AC_MSG_RESULT([yes])
 				AC_DEFINE([HAVE_SCANDIR_VOID_P], [1], [Define to 1 if you have the 'scandir' function with int (* compar)(const void *, const void *)])
 			],[
-				AC_MSG_ERROR([
-*** No scandir function available.])
+				AC_MSG_RESULT([yes])
+				AC_DEFINE([HAVE_SCANDIR_VOID_P], [1], [Define to 1 if you have the 'scandir' function with int (* compar)(const void *, const void *)])
 			])
 		])
 fi
diff -burN fontconfig-2.11.0/src/fcdefault.c fontconfig-2.11.0-PS3/src/fcdefault.c
--- fontconfig-2.11.0/src/fcdefault.c	2013-10-10 23:10:18.000000000 -0400
+++ fontconfig-2.11.0-PS3/src/fcdefault.c	2013-12-16 10:13:43.545676333 -0500
@@ -23,7 +23,11 @@
  */
 
 #include "fcint.h"
-#include <limits.h>
+#ifdef __lv2ppu__
+  #include <sys/syslimits.h>
+#else
+  #include <limits.h>
+#endif
 #include <string.h>
 
 /* MT-safe */
@@ -149,7 +153,7 @@
 #else
 # if defined (HAVE_GETEXECNAME)
 	const char *p = getexecname ();
-# else
+# elif defined(HAVE_READLINK)
 	char buf[PATH_MAX + 1];
 	int len;
 	char *p = NULL;
@@ -160,6 +164,8 @@
 	    buf[len] = '\0';
 	    p = buf;
 	}
+#else
+	char *p = NULL;
 # endif
 	if (p)
 	{
diff -burN fontconfig-2.11.0/src/fcscandir.c fontconfig-2.11.0-PS3/src/fcscandir.c
--- fontconfig-2.11.0/src/fcscandir.c	1969-12-31 19:00:00.000000000 -0500
+++ fontconfig-2.11.0-PS3/src/fcscandir.c	2013-12-16 10:12:58.285236231 -0500
@@ -0,0 +1,119 @@
+#include <sys/types.h>
+#include <dirent.h>
+#include <stdlib.h>
+#include <stddef.h>
+#include <string.h>
+
+#ifndef NULL
+#  define NULL ((void *) 0)
+#endif
+
+/* Initial guess at directory allocated.  */
+#define INITIAL_ALLOCATION 20
+
+int scandir(const char *directory_name,
+	struct dirent ***array_pointer, int (*select_function) (const struct dirent *),
+#ifdef USE_SCANDIR_COMPARE_STRUCT_DIRENT
+	/* This is what the Linux man page says */
+	int (*compare_function) (const struct dirent **, const struct dirent **)
+#else
+	/* This is what the Linux header file says ... */
+	int (*compare_function) (const void *, const void *)
+#endif
+	);
+
+int scandir(const char *directory_name,
+	struct dirent ***array_pointer, int (*select_function) (const struct dirent *),
+#ifdef USE_SCANDIR_COMPARE_STRUCT_DIRENT
+	/* This is what the linux man page says */
+	int (*compare_function) (const struct dirent **, const struct dirent **)
+#else
+	/* This is what the linux header file says ... */
+	int (*compare_function) (const void *, const void *)
+#endif
+	)
+{
+	DIR *directory;
+	struct dirent **array;
+	struct dirent *entry;
+	struct dirent *copy;
+	int allocated = INITIAL_ALLOCATION;
+	int counter = 0;
+
+	/* Get initial list space and open directory.  */
+
+	if (directory = opendir(directory_name), directory == NULL)
+		return -1;
+
+	if (array = (struct dirent **)malloc(allocated * sizeof(struct dirent *)), array == NULL)
+		return -1;
+
+	/* Read entries in the directory.  */
+
+	while (entry = readdir(directory), entry)
+		if (select_function == NULL || (*select_function) (entry)) {
+			/* User wants them all, or he wants this one.  Copy the entry.  */
+
+			/*
+			* On some OSes the declaration of "entry->d_name" is a minimal-length
+			* placeholder.  Example: Solaris:
+			*      /usr/include/sys/dirent.h:
+			*              "char d_name[1];"
+			*      man page "dirent(3)":
+			*              The field d_name is the beginning of the character array
+			*              giving the name of the directory entry. This name is
+			*              null terminated and may have at most MAXNAMLEN chars.
+			* So our malloc length may need to be increased accordingly.
+			*      sizeof(entry->d_name): space (possibly minimal) in struct.
+			*      strlen(entry->d_name): actual length of the entry. 
+			*
+			*                      John Kavadias <john_kavadias@hotmail.com>
+			*                      David Lee <t.d.lee@durham.ac.uk>
+			*/
+			int namelength = strlen(entry->d_name) + 1; /* length with NULL */
+			int extra = 0;
+
+			if (sizeof(entry->d_name) <= namelength) {
+				/* allocated space <= required space */
+				extra += namelength - sizeof(entry->d_name);
+			}
+
+			if (copy = (struct dirent *)malloc(sizeof(struct dirent) + extra), copy == NULL) {
+				closedir(directory);
+				free(array);
+				return -1;
+			}
+			copy->d_ino = entry->d_ino;
+			copy->d_reclen = entry->d_reclen;
+			strcpy(copy->d_name, entry->d_name);
+
+			/* Save the copy.  */
+
+			if (counter + 1 == allocated) {
+			allocated <<= 1;
+			array = (struct dirent **)
+			realloc((char *)array, allocated * sizeof(struct dirent *));
+			if (array == NULL) {
+				closedir(directory);
+				free(array);
+				free(copy);
+				return -1;
+			}
+		}
+		array[counter++] = copy;
+	}
+
+	/* Close things off.  */
+
+	array[counter] = NULL;
+	*array_pointer = array;
+	closedir(directory);
+
+	/* Sort?  */
+
+	if (counter > 1 && compare_function)
+		qsort((char *)array, counter, sizeof(struct dirent *)
+		, (int (*)(const void *, const void *))(compare_function));
+
+	return counter;
+}
diff -burN fontconfig-2.11.0/src/fcxml.c fontconfig-2.11.0-PS3/src/fcxml.c
--- fontconfig-2.11.0/src/fcxml.c	2013-10-10 23:10:18.000000000 -0400
+++ fontconfig-2.11.0-PS3/src/fcxml.c	2013-12-16 10:13:54.331541288 -0500
@@ -2242,6 +2242,7 @@
     if (!FcConfigParseAndLoad (parse->config, s, !ignore_missing))
 	parse->error = FcTrue;
 #ifndef _WIN32
+#ifndef __lv2ppu__
     else
     {
         FcChar8 *filename;
@@ -2293,6 +2294,7 @@
             FcStrFree(filename);
     }
 #endif
+#endif
     FcStrBufDestroy (&parse->pstack->str);
 
   bail:
diff -burN fontconfig-2.11.0/src/Makefile.am fontconfig-2.11.0-PS3/src/Makefile.am
--- fontconfig-2.11.0/src/Makefile.am	2013-10-10 23:10:17.000000000 -0400
+++ fontconfig-2.11.0-PS3/src/Makefile.am	2013-12-16 10:12:58.285236231 -0500
@@ -152,6 +152,7 @@
 	fcobjshash.h \
 	fcpat.c \
 	fcserialize.c \
+	fcscandir.c \
 	fcstat.c \
 	fcstr.c \
 	fcwindows.h \
diff -burN fontconfig-2.11.0/src/Makefile.in fontconfig-2.11.0-PS3/src/Makefile.in
--- fontconfig-2.11.0/src/Makefile.in	2013-10-11 00:28:47.000000000 -0400
+++ fontconfig-2.11.0-PS3/src/Makefile.in	2013-12-16 10:12:58.286236219 -0500
@@ -155,7 +155,8 @@
 	fccfg.lo fccharset.lo fccompat.lo fcdbg.lo fcdefault.lo \
 	fcdir.lo fcformat.lo fcfreetype.lo fcfs.lo fchash.lo fcinit.lo \
 	fclang.lo fclist.lo fcmatch.lo fcmatrix.lo fcname.lo fcobjs.lo \
-	fcpat.lo fcserialize.lo fcstat.lo fcstr.lo fcxml.lo ftglue.lo
+	fcpat.lo fcserialize.lo fcscandir.lo fcstat.lo fcstr.lo fcxml.lo \
+	ftglue.lo
 libfontconfig_la_OBJECTS = $(am_libfontconfig_la_OBJECTS)
 AM_V_lt = $(am__v_lt_@AM_V@)
 am__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)
@@ -446,6 +447,7 @@
 	fcobjshash.h \
 	fcpat.c \
 	fcserialize.c \
+	fcscandir.c \
 	fcstat.c \
 	fcstr.c \
 	fcwindows.h \
@@ -585,6 +587,7 @@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/fcobjs.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/fcpat.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/fcserialize.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/fcscandir.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/fcstat.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/fcstr.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/fcxml.Plo@am__quote@
